# Leer el archivo Excel
datos <- read_excel(ruta_archivo)
View(datos)
# Leer el archivo de Excel
ruta_archivo = "prueba con r.xlsx"
# Leer el archivo Excel
datos <- read_excel(ruta_archivo, sheet = "MAIN DB (2013-2023)")
View(datos)
datos_con_indices <- datos %>%
arrange(Fecha) %>%  # Ordenar por fecha para garantizar el orden temporal
group_by(`Denominacion del caso`) %>%
mutate(Numero_conflicto = group_indices())
View(datos_con_indices)
datos_ordenados <- datos_con_indices %>%
arrange(datos_con_indices$`Denominacion del caso`)
View(datos_ordenados)
# Ordenar los datos por denominación del caso y fecha
datos_con_indices <- datos %>%
arrange(Denominacion_del_caso, Fecha)
# Leer el archivo de Excel
ruta_archivo = "prueba con r.xlsx"
# Leer el archivo Excel
datos <- read_excel(ruta_archivo, sheet = "MAIN DB (2013-2023)")
# Ordenar los datos por denominación del caso y fecha
datos_con_indices <- datos %>%
arrange(Denominacion_del_caso, Fecha)
datos_con_indices <- datos %>%
arrange(datos_con_indices$`Denominacion del caso`, datos_con_indices$Fecha)
# Leer el archivo de Excel
ruta_archivo = "prueba con r.xlsx"
# Leer el archivo Excel
datos <- read_excel(ruta_archivo, sheet = "MAIN DB (2013-2023)")
# Ordenar los datos por denominación del caso y fecha
datos_con_indices <- datos %>%
arrange(datos_con_indices$`Denominacion del caso`, datos_con_indices$Fecha)
# Ordenar los datos por denominación del caso y fecha
datos_con_indices <- datos %>%
arrange(datos$`Denominacion del caso`, datos$Fecha)
# Agregar una columna para el número de conflicto
datos <- datos %>%
mutate(Numero_conflicto = group_indices(., Denominacion_del_caso))
# Ordenar los datos por denominación del caso y fecha
datos_con_indices <- datos %>%
arrange(datos$`Denominacion del caso`, datos$Fecha)
# Agregar una columna para el número de conflicto
datos_con_indices <- datos_con_indices %>%
mutate(Numero_conflicto = group_indices(., datos_con_indices$`Denominacion del caso`))
View(datos_con_indices)
# Ordenar los datos por denominación del caso y fecha
datos_con_indices <- datos %>%
arrange(datos$`Denominacion del caso`, datos$Fecha)
# Agregar una columna para el número de conflicto
datos_con_indices <- datos_con_indices %>%
mutate(Numero_conflicto = group_indices(., datos_con_indices$`Fecha`))
View(datos_con_indices)
datos_ordenados <- datos_con_indices %>%
arrange(datos_con_indices$`Denominacion del caso`)
View(datos_ordenados)
datos_ordenados <- datos_con_indices %>%
arrange(datos_con_indices$`Numero_conflicto`)
View(datos_ordenados)
# Leer el archivo de Excel
ruta_archivo = "prueba con r.xlsx"
# Leer el archivo Excel
datos <- read_excel(ruta_archivo, sheet = "MAIN DB (2013-2023)")
datos_con_indices <- data %>%
arrange(Denominacion_del_caso, Fecha) %>%
group_by(Denominacion_del_caso) %>%
mutate(Numero_conflicto = row_number())
datos_con_indices <- data %>%
arrange(datos$`Denominacion del caso`, datos$Fecha) %>%
group_by(datos$`Denominacion del caso`) %>%
mutate(Numero_conflicto = row_number())
# Leer el archivo de Excel
ruta_archivo = "prueba con r.xlsx"
# Leer el archivo Excel
datos <- read_excel(ruta_archivo, sheet = "MAIN DB (2013-2023)")
datos_con_indices <- data %>%
arrange(datos$`Denominacion del caso`, datos$Fecha) %>%
group_by(datos$`Denominacion del caso`) %>%
mutate(Numero_conflicto = row_number())
# Cargar paquetes
library(dplyr)
library(readxl)
# Leer el archivo de Excel
ruta_archivo = "prueba con r.xlsx"
# Leer el archivo Excel
datos <- read_excel(ruta_archivo, sheet = "MAIN DB (2013-2023)")
datos_con_indices <- data %>%
arrange(datos$`Denominacion del caso`, datos$Fecha) %>%
group_by(datos$`Denominacion del caso`) %>%
mutate(Numero_conflicto = row_number())
datos_con_indices <- datos %>%
arrange(datos$`Denominacion del caso`, datos$Fecha) %>%
group_by(datos$`Denominacion del caso`) %>%
mutate(Numero_conflicto = row_number())
View(datos_con_indices)
# Cargar paquetes
library(dplyr)
library(readxl)
# Leer el archivo de Excel
ruta_archivo = "prueba con r.xlsx"
# Leer el archivo Excel
datos <- read_excel(ruta_archivo, sheet = "MAIN DB (2013-2023)")
datos_con_indices <- datos %>%
arrange(datos$`Denominacion del caso`, datos$Fecha) %>%
group_by(datos$`Denominacion del caso`) %>%
mutate(Numero_conflicto = row_number())
View(datos_con_indices)
# Leer el archivo de Excel
ruta_archivo = "prueba con r.xlsx"
# Leer el archivo Excel
datos <- read_excel(ruta_archivo, sheet = "MAIN DB (2013-2023)")
datos_con_indices <- datos %>%
arrange(datos$Fecha) %>% # Aseguramos que los datos estén ordenados por fecha
group_by(datos$`Denominacion del caso`) %>% # Agrupamos por la columna "Denominacion del caso"
mutate(Numero_conflicto = group_indices())
datos_con_indices <- datos %>%
arrange(datos$Fecha) %>% # Aseguramos que los datos estén ordenados por fecha
group_by(datos$`Denominacion del caso`) %>% # Agrupamos por la columna "Denominacion del caso"
mutate(Numero_conflicto = group_indices())
# Cargar paquetes
library(dplyr)
library(readxl)
# Leer el archivo Excel
datos <- read_excel("prueba con r.xlsx", sheet = "MAIN DB (2013-2023)")
datos_con_indices <- datos %>%
arrange(datos$Fecha) %>% # Aseguramos que los datos estén ordenados por fecha
group_by(datos$`Denominacion del caso`) %>% # Agrupamos por la columna "Denominacion del caso"
mutate(Numero_conflicto = group_indices())
View(datos_con_indices)
datos_ordenados <- datos_con_indices %>%
arrange(datos_con_indices$`Numero_conflicto`)
View(datos_ordenados)
# Leer el archivo Excel
datos <- read_excel("prueba con r.xlsx", sheet = "MAIN DB (2013-2023)")
# Ordenar la base de datos por la columna de "Fecha"
datos <- datos[order(datos$Fecha), ]
# Cargar paquetes
library(dplyr)
library(readxl)
# Leer el archivo Excel
datos <- read_excel("prueba con r.xlsx", sheet = "MAIN DB (2013-2023)")
# Ordenar la base de datos por la columna de "Fecha"
datos <- datos[order(datos$Fecha), ]
View(datos)
# Crear un vector para almacenar los nombres de conflictos y sus números asignados
nombres_conflictos <- c()
numeros_asignados <- c()
numero_actual <- 1
# Iterar sobre cada fila de la base de datos
for (i in 1:nrow(datos)) {
nombre_conflicto <- datos$`Denominacion del caso`[i]
# Verificar si el nombre de conflicto ya tiene un número asignado
if (!(nombre_conflicto %in% nombres_conflictos)) {
nombres_conflictos <- c(nombres_conflictos, nombre_conflicto)
numeros_asignados <- c(numeros_asignados, numero_actual)
numero_actual <- numero_actual + 1
}
}
# Agregar los números asignados a la base de datos
datos$Numero_conflicto <- numeros_asignados
# Leer el archivo Excel
datos <- read_excel("prueba con r.xlsx", sheet = "MAIN DB (2013-2023)")
# Ordenar la base de datos por la columna de "Fecha"
datos <- datos[order(datos$Fecha), ]
df <- datos %>%
group_by(datos$`Denominacion del caso`) %>%
mutate(ID_conflicto = match(datos$`Denominacion del caso`, unique(datos$`Denominacion del caso`)))
nombres_conflicto <- unique(datos$`Denominacion del caso`)
nombres_conflicto <- unique(datos$`Denominacion del caso`)
str(nombres_conflicto)
nombres_conflicto <- unique(datos$`Denominacion del caso`)
head(nombres_conflicto)
View(datos)
# Crear una función para asignar números a los nombres de conflictos
asignar_numeros <- function(nombre, nombres_conflicto) {
numero <- match(nombre, nombres_conflicto)
return(numero)
}
View(asignar_numeros)
# Aplicar la función a la columna "Denominacion del caso" y agregar los números asignados a una nueva columna
datos$numero_conflicto <- sapply(datos$`Denominacion del caso`, asignar_numeros, nombres_conflicto)
# Mostrar el dataframe con los números asignados
print(datos)
nombres_conflicto <- unique(datos$`Denominacion del caso`)
print(nombres_conflicto)
nombres_conflicto <- unique(datos$`Denominacion del caso`)
head(nombres_conflicto)
View(datos)
datos_ordenados <- datos[order(datos$`Denominacion del caso`), ]
View(datos_ordenados)
# Cargar paquetes
library(dplyr)
library(readxl)
# Leer el archivo Excel
datos <- read_excel("prueba en rstudio.xlsx", sheet = "MAIN DB (2013-2023)")
View(datos)
# Ordenar la base de datos por la columna de "Fecha"
datos <- datos[order(datos$Fecha), ]
nombres_conflicto <- unique(datos$`Denominacion del caso`)
head(nombres_conflicto)
# Crear una función para asignar números a los nombres de conflictos
asignar_numeros <- function(nombre, nombres_conflicto) {
numero <- match(nombre, nombres_conflicto)
return(numero)
}
# Aplicar la función a la columna "Denominacion del caso" y agregar los números asignados a una nueva columna
datos$numero_conflicto <- sapply(datos$`Denominacion del caso`, asignar_numeros, nombres_conflicto)
# Mostrar el dataframe con los números asignados
print(datos)
datos_ordenados <- datos[order(datos$`Denominacion del caso`), ]
View(datos)
View(datos_ordenados)
# Cargar paquetes
library(dplyr)
library(readxl)
# Leer el archivo Excel
datos <- read_excel("prueba en rstudio.xlsx", sheet = "MAIN DB (2013-2023)")
# Ordenar la base de datos por la columna de "Fecha"
datos <- datos[order(datos$Fecha), ]
nombres_conflicto <- unique(datos$`Denominacion del caso`)
head(nombres_conflicto)
# Crear una función para asignar números a los nombres de conflictos
asignar_numeros <- function(nombre, nombres_conflicto) {
numero <- match(nombre, nombres_conflicto)
return(numero)
}
# Aplicar la función a la columna "Denominacion del caso" y agregar los números asignados a una nueva columna
datos$Numero <- sapply(datos$`Denominacion del caso`, asignar_numeros, nombres_conflicto)
# Mostrar el dataframe con los números asignados
print(datos)
datos_ordenados <- datos[order(datos$`Denominacion del caso`), ]
View(datos_ordenados)
write.xlsx(datos, row.names = FALSE)
data_de_prueba = write.xlsx(datos, row.names = FALSE)
data_de_prueba = write.xlsx(datos)
install.packages("openxlsx")
# Carga del paquete openxlsx
library(openxlsx)
# Exportar el dataframe 'datos' a un archivo Excel
write.xlsx(datos, "data_numeros.xlsx")
# Cargar paquetes
library(dplyr)
library(readxl)
# Leer el archivo Excel
datos <- read_excel("prueba en rstudio.xlsx", sheet = "MAIN DB (2013-2023)")
# Ordenar la base de datos por la columna de "Fecha"
datos <- datos[order(datos$Fecha), ]
# Eliminar los valores NA en "Denominaciones"
datos <- datos[complete.cases(datos$`Denominacion del caso`), ]
nombres_conflicto <- unique(datos$`Denominacion del caso`)
print(nombres_conflicto)
# Crear una función para asignar números a los nombres de conflictos
asignar_numeros <- function(nombre, nombres_conflicto) {
numero <- match(nombre, nombres_conflicto)
return(numero)
}
# Aplicar la función a la columna "Denominacion del caso" y agregar los números asignados a una nueva columna
datos$Numero <- sapply(datos$`Denominacion del caso`, asignar_numeros, nombres_conflicto)
# Mostrar el dataframe con los números asignados
print(datos)
datos_ordenados <- datos[order(datos$`Denominacion del caso`), ]
#Para asignarle la etiqueta de "Regional" a los datos
datos_ordenados$Nivel <- ifelse(is.na(datos_ordenados$Nivel), "Regional", datos_ordenados$Nivel)
#Para ordenar la base de datos en función a los número de casos
datos_ordenados <- datos_ordenados[order(datos_ordenados$Numero), ]
#install.packages("openxlsx")
# Cargar paquetes
library(dplyr)
library(readxl)
# Leer el archivo Excel
datos <- read_excel("prueba en rstudio.xlsx", sheet = "MAIN DB (2013-2023)")
# Ordenar la base de datos por la columna de "Fecha"
datos <- datos[order(datos$Fecha), ]
# Eliminar los valores NA en "Denominaciones"
datos <- datos[complete.cases(datos$`Denominacion del caso`), ]
nombres_conflicto <- unique(datos$`Denominacion del caso`)
print(nombres_conflicto)
# Crear una función para asignar números a los nombres de conflictos
asignar_numeros <- function(nombre, nombres_conflicto) {
numero <- match(nombre, nombres_conflicto)
return(numero)
}
# Aplicar la función a la columna "Denominacion del caso" y agregar los números asignados a una nueva columna
datos$Numero <- sapply(datos$`Denominacion del caso`, asignar_numeros, nombres_conflicto)
# Mostrar el dataframe con los números asignados
print(datos)
datos_ordenados <- datos[order(datos$`Denominacion del caso`), ]
#Para asignarle la etiqueta de "Regional" a los datos
datos_ordenados$Nivel <- ifelse(is.na(datos_ordenados$Nivel), "Regional", datos_ordenados$Nivel)
#Para ordenar la base de datos en función a los número de casos
datos_ordenados <- datos_ordenados[order(datos_ordenados$Numero), ]
#install.packages("openxlsx")
# Carga del paquete openxlsx
library(openxlsx)
# Exportar el dataframe 'datos' a un archivo Excel
write.xlsx(datos_ordenados, "data_numeros.xlsx")
View(datos_ordenados)
conteo_fases <- datos_ordenados %>%
group_by(datos_ordenados$`Denominacion del caso`) %>%
summarize(conteo_fase_temprana = sum(`Fases Activos` == "Fase temprana", na.rm = TRUE),
conteo_escalamiento = sum(`Fases Activos` == "Escalamiento", na.rm = TRUE),
conteo_crisis = sum(`Fases Activos` == "Crisis", na.rm = TRUE),
conteo_desescalamiento = sum(`Fases Activos` == "Desescalamiento", na.rm = TRUE),
conteo_dialogo = sum(`Fases Activos` == "Dialogo", na.rm = TRUE))
# Muestra el resultado
print(conteo_fases)
View(conteo_fases)
#Conteo de meses según Estado
conteo_estado <- datos_ordenados %>%
group_by(datos_ordenados$`Denominacion del caso`) %>%
summarize(conteo_latente = sum(`Estado` == "Latente", na.rm = TRUE),
conteo_activo = sum(`Estado` == "Activo", "Activo (reactivado)", na.rm = TRUE))
#Conteo de meses según Estado
conteo_estado <- datos_ordenados %>%
group_by(datos_ordenados$`Denominacion del caso`) %>%
summarize(conteo_latente = sum(`Estado` == "Latente", na.rm = TRUE),
conteo_activo = sum(`Estado` == "Activo", na.rm = TRUE))
# Muestra el resultado
print(conteo_estado)
View(conteo_estado)
#Conteo de meses según Estado
conteo_estado <- datos_ordenados %>%
group_by(datos_ordenados$`Denominacion del caso`) %>%
summarize(conteo_latente = sum(`Estado` == "Latente", na.rm = TRUE),
conteo_activo = sum(`Estado` %in% c("Activo", "Activo (reactivado)"), na.rm = TRUE))
# Muestra el resultado
print(conteo_estado)
View(conteo_estado)
# Utiliza la función group_by() y summarize() para clasificar los conflictos según "Nivel de gobierno"
clasificacion_conflictos <- datos_ordenados %>%
group_by(`Denominacion del caso`, `Nivel de gobierno`) %>%
summarize(n_conflictos = n())
# Muestra el resultado
print(clasificacion_conflictos)
View(clasificacion_conflictos)
# Utiliza la función group_by() y summarize() para clasificar los conflictos según "Nivel de gobierno"
clasificacion_conflictos <- datos_ordenados %>%
group_by(`Denominacion del caso`, `Nivel de gobierno`) %>%
summarize(n_meses_del_conflictos = n())
# Muestra el resultado
print(clasificacion_conflictos)
#creación de la data si escaló o no
# Crea la variable dicotómica
variable_escalamiento <- datos_ordenados %>%
group_by(datos_ordenados$`Denominacion del caso`) %>%
mutate(Escalo = ifelse("Escalamiento" %in% datos_ordenados$`Fases Activos`, 1, 0))
# Muestra el resultado
print(datos)
#creación de la data si escaló o no
# Crea la variable dicotómica
variable_escalamiento <- datos_ordenados %>%
group_by(datos_ordenados$`Denominacion del caso`) %>%
mutate(Escalo = ifelse("Escalamiento" %in% datos_ordenados$`Fases Activos`, 1, 0))
# Muestra el resultado
print(variable_escalamiento)
View(variable_escalamiento)
#creación de la data si escaló o no
# Crea la variable dicotómica
nueva_base <- datos_ordenados %>%
group_by(`Denominacion del caso`) %>%
mutate(escalamiento_presente = if_else("Escalamiento" %in% `Fases Activos`, 1, 0)) %>%
distinct(`Denominacion del caso`, .keep_all = TRUE)
# Muestra la nueva base de datos
print(nueva_base)
View(nueva_base)
View(variable_escalamiento)
#creación de la data si escaló o no
# Crea la variable dicotómica
variable_escalamiento <- datos_ordenados %>%
group_by(`Denominacion del caso`) %>%
mutate(escalo = if_else("Escalamiento" %in% `Fases Activos`, 1, 0)) %>%
distinct(`Denominacion del caso`, .keep_all = TRUE)
# Selecciona solo las variables deseadas
variable_escalamiento <- select(datos, `Denominacion del caso`, escalo)
#creación de la data si escaló o no
# Crea la variable dicotómica
variable_escalamiento <- datos_ordenados %>%
group_by(`Denominacion del caso`) %>%
mutate(escalo = if_else("Escalamiento" %in% `Fases Activos`, 1, 0)) %>%
distinct(`Denominacion del caso`, .keep_all = TRUE)
# Selecciona solo las variables deseadas
variable_escalamiento <- select(datos, variable_escalamiento$`Denominacion del caso`, variable_escalamiento$escalo)
#creación de la data si escaló o no
# Crea la variable dicotómica
variable_escalamiento <- datos_ordenados %>%
group_by(`Denominacion del caso`) %>%
mutate(escalo = if_else("Escalamiento" %in% `Fases Activos`, 1, 0)) %>%
distinct(`Denominacion del caso`, .keep_all = TRUE)
# Selecciona solo las variables deseadas
variable_escalamiento <- select(variable_escalamiento, variable_escalamiento$`Denominacion del caso`, variable_escalamiento$escalo)
#creación de la data si escaló o no
# Crea la variable dicotómica
variable_escalamiento <- datos_ordenados %>%
group_by(`Denominacion del caso`) %>%
mutate(escalo = if_else("Escalamiento" %in% `Fases Activos`, 1, 0)) %>%
distinct(`Denominacion del caso`, .keep_all = TRUE)
# Muestra la nueva base de datos
print(variable_escalamiento)
View(variable_escalamiento)
# Selecciona solo las variables deseadas
variable_escalamiento <- select(variable_escalamiento, variable_escalamiento$`Denominacion del caso`, variable_escalamiento$escalo)
#creación de la data si escaló o no
# Crea la variable dicotómica
variable_escalamiento <- datos_ordenados %>%
group_by(`Denominacion del caso`) %>%
mutate(escalo = if_else("Escalamiento" %in% `Fases Activos`, 1, 0)) %>%
distinct(`Denominacion del caso`, .keep_all = TRUE)
# Selecciona solo las variables deseadas
variable_escalamiento <- select(variable_escalamiento, `Denominacion del caso`, escalo)
# Muestra la nueva base de datos
print(variable_escalamiento)
View(variable_escalamiento)
#Merge de la BASE DE DATOS GENERAL
BD_conflcitos <- merge(conteo_estado, conteo_fases, by = "Denominacion del caso", all = TRUE)
#Merge de la BASE DE DATOS GENERAL
BD_conflcitos <- merge(conteo_estado, conteo_fases, by = "datos_ordenado$`Denominacion del caso`", all = TRUE)
#Conteo de meses según Fases Activos
conteo_fases <- datos_ordenados %>%
group_by(`Denominacion del caso`) %>%
summarize(conteo_fase_temprana = sum(`Fases Activos` == "Fase temprana", na.rm = TRUE),
conteo_escalamiento = sum(`Fases Activos` == "Escalamiento", na.rm = TRUE),
conteo_crisis = sum(`Fases Activos` == "Crisis", na.rm = TRUE),
conteo_desescalamiento = sum(`Fases Activos` == "Desescalamiento", na.rm = TRUE),
conteo_dialogo = sum(`Fases Activos` == "Dialogo", na.rm = TRUE))
# Muestra el resultado
print(conteo_fases)
#Conteo de meses según Estado
conteo_estado <- datos_ordenados %>%
group_by(`Denominacion del caso`) %>%
summarize(conteo_latente = sum(`Estado` == "Latente", na.rm = TRUE),
conteo_activo = sum(`Estado` %in% c("Activo", "Activo (reactivado)"), na.rm = TRUE))
# Muestra el resultado
print(conteo_estado)
#Merge de la BASE DE DATOS GENERAL
BD_conflcitos <- merge(conteo_estado, conteo_fases, by = "Denominacion del caso", all = TRUE)
BD_conflcitos <- merge(BD_conflcitos, clasificacion_conflictos, by = "Denominacion del caso", all = TRUE)
BD_conflcitos <- merge(BD_conflcitos, variable_escalamiento, by = "Denominacion del caso", all = TRUE)
# Muestra el resultado
print(BD_conflcitos)
View(BD_conflcitos)
#Regresión logísitca binomial
# Realiza la regresión logística
modelo <- glm(BD_conflcitos$escalo ~ BD_conflcitos$conteo_latente, BD_conflcitos$conteo_activo, BD_conflcitos$conteo_fase_temprana, BD_conflcitos$conteo_crisis, BD_conflcitos$n_meses_del_conflictos, data = BD_conflcitos, family = binomial)
#Regresión logísitca binomial
# Realiza la regresión logística
modelo <- glm(BD_conflcitos$escalo ~ BD_conflcitos$conteo_latente + BD_conflcitos$conteo_activo + BD_conflcitos$conteo_fase_temprana + BD_conflcitos$conteo_crisis + BD_conflcitos$n_meses_del_conflictos + data = BD_conflcitos, family = binomial)
#Regresión logísitca binomial
# Realiza la regresión logística
modelo <- glm(escalo ~ conteo_latente + conteo_activo + conteo_fase_temprana + conteo_crisis + n_meses_del_conflictos, data = BD_conflcitos, family = binomial)
# Muestra un resumen del modelo
summary(modelo)
#Regresión logísitca binomial
# Realiza la regresión logística
modelo <- glm(escalo ~ conteo_latente + conteo_activo + n_meses_del_dialogo + `Nivel de gobierno` + conteo_fase_temprana + conteo_crisis + n_meses_del_conflictos, data = BD_conflcitos, family = binomial)
#Regresión logísitca binomial
# Realiza la regresión logística
modelo <- glm(escalo ~ conteo_latente + conteo_activo + `Nivel de gobierno` + conteo_fase_temprana + conteo_crisis + n_meses_del_conflictos, data = BD_conflcitos, family = binomial)
# Muestra un resumen del modelo
summary(modelo)
#Clasificación de conflictos según "Nivel de gobierno" y su duración total en meses
clasificacion_conflictos <- datos_ordenados %>%
group_by(`Denominacion del caso`, `Nivel de gobierno`, `Tipo`) %>%
summarize(n_meses_del_conflictos = n())
# Muestra el resultado
print(clasificacion_conflictos)
View(clasificacion_conflictos)
#Merge de la BASE DE DATOS GENERAL
BD_conflcitos <- merge(conteo_estado, conteo_fases, by = "Denominacion del caso", all = TRUE)
BD_conflcitos <- merge(BD_conflcitos, clasificacion_conflictos, by = "Denominacion del caso", all = TRUE)
BD_conflcitos <- merge(BD_conflcitos, variable_escalamiento, by = "Denominacion del caso", all = TRUE)
# Muestra el resultado
print(BD_conflcitos)
#Regresión logísitca binomial
# Realiza la regresión logística
modelo <- glm(escalo ~ conteo_latente + conteo_activo + `Nivel de gobierno` + conteo_fase_temprana + Tipo + conteo_crisis + n_meses_del_conflictos, data = BD_conflcitos, family = binomial)
# Muestra un resumen del modelo
summary(modelo)
#Clasificación de conflictos según "Nivel de gobierno" y su duración total en meses
clasificacion_conflictos <- datos_ordenados %>%
group_by(`Denominacion del caso`, `Nivel de gobierno`, `Tipo`, `Actividad`, `Tipo de actividad`, `Nivel` ) %>%
summarize(n_meses_del_conflictos = n())
# Muestra el resultado
print(clasificacion_conflictos)
#Merge de la BASE DE DATOS GENERAL
BD_conflcitos <- merge(conteo_estado, conteo_fases, by = "Denominacion del caso", all = TRUE)
BD_conflcitos <- merge(BD_conflcitos, clasificacion_conflictos, by = "Denominacion del caso", all = TRUE)
BD_conflcitos <- merge(BD_conflcitos, variable_escalamiento, by = "Denominacion del caso", all = TRUE)
# Muestra el resultado
print(BD_conflcitos)
#Regresión logísitca binomial
# Realiza la regresión logística
modelo <- glm(escalo ~ conteo_latente + conteo_activo + `Nivel de gobierno` + conteo_fase_temprana + Tipo + conteo_crisis + n_meses_del_conflictos, data = BD_conflcitos, family = binomial)
# Muestra un resumen del modelo
summary(modelo)
#Regresión logísitca binomial
# Realiza la regresión logística
modelo <- glm(escalo ~ conteo_latente + conteo_activo + `Nivel de gobierno` + conteo_fase_temprana + Tipo + conteo_crisis + Nivel + Actividad + Tipo de actividad + n_meses_del_conflictos, data = BD_conflcitos, family = binomial)
#Regresión logísitca binomial
# Realiza la regresión logística
modelo <- glm(escalo ~ conteo_latente + conteo_activo + `Nivel de gobierno` + conteo_fase_temprana + Tipo + conteo_crisis + Nivel + Actividad + `Tipo de actividad` + n_meses_del_conflictos, data = BD_conflcitos, family = binomial)
#Regresión logísitca binomial
# Realiza la regresión logística
modelo <- glm(escalo ~ conteo_latente + conteo_activo + `Nivel de gobierno` + conteo_fase_temprana + Tipo + conteo_crisis + Nivel + Actividad + n_meses_del_conflictos, data = BD_conflcitos, family = binomial)
# Muestra un resumen del modelo
summary(modelo)
#Regresión logísitca binomial
# Realiza la regresión logística
modelo <- glm(escalo ~ conteo_latente + conteo_activo + `Nivel de gobierno` + conteo_fase_temprana + Tipo + conteo_crisis + Nivel + Actividad + n_meses_del_conflictos, data = BD_conflcitos, family = binomial)
# Muestra un resumen del modelo
summary(modelo)
